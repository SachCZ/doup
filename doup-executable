#!/usr/bin/python3

import sys
import os

def main(tag):
    base_dir = os.path.join(os.environ["DOUP_SEARCHDIR"], tag)
    if not os.path.isdir(base_dir):
        raise RuntimeError("{} is not a dir!".format(base_dir))

    print("Building and running: {}".format(tag))
    build_command = "DOCKER_BUILDKIT=1 docker build -t {} -f {} .".format(tag, os.path.join(base_dir, "Dockerfile"))
    print(build_command)
    os.system(build_command)
    local_dir_path = os.path.join(base_dir, "home")

    mounts = [
        (os.path.join(os.environ["HOME"], ".ssh"), "/home/devuser/.ssh"),
        (os.path.join(os.environ["HOME"], ".config"), "/home/devuser/.config"),
        (os.path.join(os.environ["HOME"], ".bashrc"), "/home/devuser/.bashrc"),
        (os.path.join(os.environ["HOME"], ".gitconfig"), "/home/devuser/.gitconfig"),
        (local_dir_path, "/home/devuser")
    ]
    for local_path, _ in mounts:
        if not os.path.exists(local_path):
            raise RuntimeError("{} is not a dir!".format(local_path))

    run_command = "docker run {} -td --name {} {}".format(
        " ".join("-v {}:{}".format(local_path, docker_path) for local_path, docker_path in mounts),
        tag, tag)
    print(run_command)
    os.system(run_command)

    commands = [
        "wget https://starship.rs/install.sh -O starship_install.sh",
        "chmod +x starship_install.sh",
        "sudo ./starship_install.sh --yes",
        "rm -rf starship_install.sh",
        "rm -rf -- ~/.local/share/nvim/site/pack/packer/start/packer.nvim",
        "git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim",
        "nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'"
    ]

    post_run_command = "docker exec {} /bin/sh -c \"{}\"".format(tag, ";".join(commands))
    print(post_run_command)
    os.system(post_run_command)
    os.system("clear")

    os.system("docker exec -it {} /usr/bin/bash".format(tag))

    os.system("docker stop {}".format(tag))
    os.system("docker rm {}".format(tag))
    os.system("docker rmi {}".format(tag))
    os.system("clear")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Error: Requires exactly one argument!")
        sys.exit(1)
    main(sys.argv[1])


