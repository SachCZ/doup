#!/usr/bin/python3

import sys
import os
import subprocess

def get_base_dir(tag):
    return os.path.join(os.environ["DOUP_SEARCHDIR"], tag)


def build(tag):
    context = os.path.join(get_base_dir(tag), "context")
    build_command = "tar -czh . | DOCKER_BUILDKIT=1 docker build -t {} -".format(tag)
    subprocess.check_output(build_command, shell=True, cwd=context)


def run(tag):
    local_dir_path = os.path.join(get_base_dir(tag), "home")
    mounts = [
        (os.path.join(get_base_dir(tag), "context"), "/home/devuser/context"),
        (os.path.join(os.environ["HOME"], ".ssh"), "/home/devuser/.ssh"),
        (os.path.join(os.environ["HOME"], ".bashrc"), "/home/devuser/.bashrc"),
        (os.path.join(os.environ["HOME"], ".gitconfig"), "/home/devuser/.gitconfig"),
        (local_dir_path, "/home/devuser/workspace")
    ]
    for local_path, _ in mounts:
        if not os.path.exists(local_path):
            raise RuntimeError("Cant mount {} it is not a dir/file!".format(local_path))

    run_command = "docker run {} -td --name {} {}".format(
        " ".join("-v {}:{}".format(local_path, docker_path) for local_path, docker_path in mounts), tag, tag)
    subprocess.check_output(run_command, shell=True)


def is_running(tag):
    output = subprocess.check_output(["docker", "ps"])
    lines = output.split(b"\n")[:-1]
    tags = [line.split()[-1].decode() for line in lines][1:]
    return tag in tags


def connect(tag):
    os.system("docker exec -it {} /usr/bin/bash".format(tag))


def stop(tag):
    subprocess.check_output(["docker", "stop", tag])
    subprocess.check_output(["docker", "rm", tag])
    subprocess.check_output(["docker", "rmi", tag])


def main():
    if len(sys.argv) == 2:
        tag = sys.argv[1]
        if not is_running(tag):
            build(tag)
            run(tag)
            os.system("clear")
        connect(tag)

    elif len(sys.argv) == 3:
        if sys.argv[2] != "stop":
            print("Invalid command {}.".format(sys.argv[2]))
            sys.exit(1)
        tag = sys.argv[1]
        if not is_running(tag):
            print("No container stoped nor removed. {} is not running.".format(tag))
            sys.exit(1)
        else:
            stop(tag)
    else:
        print("Error: invalid usage. Call doup <image> or doup <image> stop!")
        sys.exit(1)


if __name__ == "__main__":
    main()    



